4th October, 2022.

** Project Idea: HTOOL **

    PROJECT QUESTIONS:

        - How can static analysis of XNU Kernel Cache's be improved?
        - Building a static analysis tool for iOS & macOS Firmware Files, focusing on
          the XNU Kernelcache.


1. Introduction

    HTool is a command-line program for analysing firmware files for iOS/watchOS/macOS
    operating systems and devices. The project should primarily focus on two areas:

        - Mach-O File Analysis.
        - Kernelcache Analysis.

    The tool will be essentially a v2.0 of a tool i wrote a few years ago with the same
    name and similar functionality. Implementing the functionality that the old tool
    supported, for example basic Mach-O analysis and handling for the older Kernelcache
    formats, would be very straight forward and take a week of work at most.

    The majority of the project would focus on the format of the new kernels, and implementing
    support for them. An extension could also be to investigate other firmware files
    if I'm able to complete this with time to spare.


    1.1 What problem does HTool solve?

        When it comes to security research surrounding Apple's platforms there is a lack
        of free, up-to-date and opensource tools that make both new and established security
        researchers lives easier. Currently, there are three options for analysis of iOS
        firmware files:

            - IDA Pro
            - Ghidra
            - JTool

        Starting with IDA Pro, this is a professional disassembler and decompiler that
        has support for most iOS firmware file formats - particularly the kernel. However,
        as it's a professional tool the current starting price is $5,000/year for a basic
        license.

        With Ghidra, which is essentially an opensource version of IDA Pro, written in Java
        by the U.S. National Security Agency (NSA), while support does exist for iOS firmware
        files, it's not up-to-date and Ghidra is quite a heavy tool to use for some quick
        analysis of firmware files.

        JTool, similar to HTool, is based on the developer tool OTool that is shipped with
        the Apple Developer Tools. However the original author is no longer focusing on iOS
        research and therefore is not actively updating it, and the tool is not opensource.

        Essentially, the intent of HTool is to fill the gap that IDA Pro and JTool leave, that
        being a lightweight, free, up-to-date and eventually opensource tool for use by iOS
        security researchers.

        The particular problem within this that HTool will attempt to solve is that of analysis
        of the Kernelcache. Other features can be implemented as a result, but the primary
        focus will be the kernel. Other firmware files can have support added later provided
        the tool is developed in a way that make extending it easy - which i intend to do.


    1.2 Overview of HTool v1.0

        HTool v1.0 was a closed-source tool that attempted to acheive the same goal. However
        it's a project that I never finished. The code has always remained closed source, a
        few beta versions were released on my website, and I wrote an article discussing the
        format of the Kernelcache around the same time.

        That code was also not as efficient as it could be. I would not be re-using that code,
        at most I would use it as a reference for some complicated functionality but it would
        NOT be reused.


    1.3 What would I learn from this project?

        There are a number of things I would learn by undertaking this project.

            - I would most likely further my knowledge of the C programming language.
            - The format and structure of newer iOS kernels.
            - The differences between the iOS and macOS platforms, and how those differences
              affect the structure of the Kernelcache.
            - I would further my knowledge of disassemblers and static analysis.


2. Features and Functionality.

    This section covers the intended features for the tool, and any resources that would
    make the work easier.

    The indended features are:

        - Mach-O/Generic File Analysis.
        - Kernelcache Analysis:
            - KEXT info analysis and extraction.
            - Kernel version info.
            - Platform info.
        - macOS Kernel Analysis
        - Supported Device Database
        - Disassembler, either using Capstone or a basic in-house disassembler w/ LLVM

    With the intention of extending the tool to other firmware files, the design and development
    of a loader would be ideal to support different file formats.


    2.1 Mach-O File Analysis

        Mach-O files[1] are used on Apple's Darwin-based operating systems. Where ELF is
        the binary format for Linux, and EXE is for Window, Apple uses Mach-O. This is
        inherited from the Mach/OSFMK Kernel that makes up part of XNU - the kernel used
        on Apple Darwin-based operating systems.

        Mach-O files have a clear file structure, with a header, load commands, segment
        commands, symbol tables and linking information.

        The extent of this feature would be to simply print to the console in a nicely
        formatted way the structure and data contained within a given Mach-O file. This
        functionality is required due to the Kernelcache being a Mach-O file too.

        2.1.1 HTool Loader

            The HTool Loader is an idea that HTool would load files into a generic file
            structure which could then be passed through the stages of analysis to determine
            the type of file, the platform it was built for and the version.

            Essentially files would be parsed into a structure and then certain checks
            could be carried out with results being set in a flags property. These flags
            can then be checked and the next stage can be determined.


    2.2 Kernelcache analysis

        On iOS, watchOS, macOS and other Apple operating systems we have the Kernel, and
        then seperate "Kernel Extensions" that extend the functionality of the kernel.
        Typically Kernel Extensions, or "KEXTs" might be for platform-specific features
        or hardware support.

        The "Kernelcache" is a file that contains the Kernel binary Mach-O and all the
        Mach-O's for Kernel Extensions. The Kernel itself then obviously includes things
        such as syscalls, and in XNU's case Mach Traps, MIG tables, etc. XNU is the name
        for the Kernel used across Apple platforms.

        The Kernel itself is placed at the begining of the kernelcache, with information
        regarding kernel extensions stored within segment commands in the mach header.

        When loading a kernel cache into HTool the kernel version, device version and any
        other details including style/format should be identified and printed to the console.

        1.2.1 Kernel Extensions

            I have previously completed my own research into two of the formats discussed.
            This can be found at [2].

            The format of the Kernelcache is much more complicated, and it also depends on
            the version of iOS[2] (and in some cases the physical device).

            * == Split Style ==

              Prior to iOS 12, 64-bit iOS Kernel's used a format known as "Split style" where
              the Kernel Extensions, themselves stored within the kernel cache as Mach-O files,
              were whole and complete, meaning you could extract a KEXT and run it independently.

              The name "Split KEXT" comes from the fact that the KEXTs are "Split" from the
              rest of the Kernelcache.

              KEXT location information was stored in the __PRELINK_INFO segment of the
              Kernel Mach-O at the start of the kernelcache. This __PRELINK_INFO segment
              had a plain-text XML which defined a KEXT "Bundle Indentifier" and a virtual
              address as to where that particular KEXT was located.

            * == Merged Style ==

              After iOS 12, and until iOS X, Apple used a new style of kernelcache known as
              "Merged Style". Now, the __PRELINK_INFO segment has been modified so the XML
              no longer defines the locations of the KEXTs.

              Instead, a new __PRELINK_INFO.__kmod_info section was added that contained a
              list of C structure that defined the details of a KEXT.

              <cont>

            * == iOS 16 ==

              Again, with iOS 16 Apple changed the format of the Kernelcache. This is where
              the majority of the research-part of my project would focus, as I already have
              knowledge and previous code to get the other two formats supported.

              <research into the ios 16 format>


    2.3 macOS Kernel Analysis

        The macOS kernel, while still built from the XNU source tree, is slightly different
        from that of iOS.

        macOS kernels are located in /System/Library/Kernels/ and are the actual kernel Mach-O,
        while in the directory /System/Library/KernelCollections/, a Boot and System collection
        file exists.

        These are MH_FILESET Mach-O's, so they don't contain any directly executable data. These
        collections contain lots of __REGIONXX segments, and a collection of LC_FILESET_ENTRY
        load commands that describe different kernel extension.

        < research more into how these are used >



    2.4 Supported Device Database

        HTool will need the data for all the devices it can recognise, so it would be useful
        to have an option to print a table of all the supported devices and some details, for
        example:

            - Device Identifier
            - Device Name
            - Device CPU Codename
            - CPU Architecture


X. Index

    1. Mach Traps

    2. MIG Tables

X. References

    [1] Mach-O File Format Introduction, Harry Moulton: https://h3adsh0tzz.com/posts/macho-file-format

    [2] Handling Kernel Extensions, Harry Moulton: https://h3adsh0tzz.com/posts/handle-kernel-extensions

    [X] Analyzing the iOS 12 kernelcache's tagged pointers, Brandon Azad, Google: https://bazad.github.io/2018/06/ios-12-kernelcache-tagged-pointers/
